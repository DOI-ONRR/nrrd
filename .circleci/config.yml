version: 2.1
orbs:
  aws-s3: circleci/aws-s3@2.0.0

jobs:
  lint:
    docker:
      - image: circleci/node:12.4
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: npm install
      - save_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          command: npm run lint
          when: always
      - store_test_results:
          path: ./test-results
      - store_artifacts:
          path: ./test-results
  unit_tests:
    docker:
      - image: circleci/node:12.13.0-browsers
    steps:
      - checkout
      - restore_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: npm install
      - save_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Run unit tests
          command: npm run test-unit-tests
      - store_test_results:
          path: ./test-results
      - store_artifacts:
          path: ./coverage

  end_to_end_tests:
    docker:
      - image: circleci/node:12.13.0-browsers
    steps:
      - checkout
      - restore_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: npm install
      - save_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Run end to end  tests
          command: npm run test-end-to-end
      - store_test_results:
          path: ./test-results
      - store_artifacts:
          path: ./__tests__/__image_snapshots__/

  lighthouse:
    docker:
      - image: circleci/node:12.13.0-browsers
    steps:
      - checkout
      - restore_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: npm install
      - save_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Run lighthouse audit
          command: npm run test-lighthouse
      - store_test_results:
          path: ./test-results
      - store_artifacts:
          path: ./test-results

  nrrd-preview:
    docker:
      # This image has the latest cf-cli as well as zero downtime plugins, if needed.
      - image: circleci/node:12.13.0
    resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: npm install
      - save_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          command: |
            ls -lart static/downloads
      - aws-s3/sync:
          arguments: |
          aws-access-key-id: NPS_AWS_ACCESS_KEY
          aws-region: NPS_AWS_REGION
          aws-secret-access-key: NPS_AWS_SECRET_ACCESS_KEY
          from: 's3://$NPS_BUCKET_NAME/downloads/'
          to: static/downloads/
      - run:
          command: |
            ls -lart static/downloads
      - run:
          name: Build gatsby
          command: export GATSBY_HASURA_URI=https://hasura-sandbox.app.cloud.gov/v1/graphql &&  export CIRCLE_STAGE='nrrd-preview' && npm run build
      - aws-s3/sync:
          aws-access-key-id: NPS_AWS_ACCESS_KEY
          aws-region: NPS_AWS_REGION
          aws-secret-access-key: NPS_AWS_SECRET_ACCESS_KEY
          from: public
          to: 's3://$NPS_BUCKET_NAME/sites/$CIRCLE_BRANCH'
      - run:
          command: |
                ls -lart static/downloads
      - run:
          name: clean up
          command: |
            bash ./.circleci/cleanup-previews.sh
  quick:
    docker:
      # This image has the latest cf-cli as well as zero downtime plugins, if needed.
      - image: circleci/node:12.13.0
    steps:
      - checkout
      - restore_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: npm install
      - save_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Build gatsby
          command: npm run build

  preview:
    docker:
      - image: circleci/node:12.13.0
    resource_class: medium+
    environment:
      TEST_REPORTS: /tmp/test-reports
    steps:
      - checkout
      - restore_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: npm install
      - save_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Build gatsby
          command: npm run build
      - run:
          name: deploy preview to cloud.gov
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cp Staticfile ./public
            bash .circleci/preview.sh
      # Upload test results

      - store_test_results:
          path: /tmp/test-reports

  merge_to_stage:
    docker:
      - image: circleci/node:12.13.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "23:d9:f2:c8:a7:b8:a8:a0:5c:a5:20:15:cc:08:f3:c7"
      - run:
          name: Merge to staging
          command: bash .circleci/stage.sh

  stage:
    docker:
      - image: circleci/node:12.13.0
    resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: npm install
      - save_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Build gatsby
          command: npm run build
      - run:
          name: deploy preview to cloud.gov
          command: |
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cp Staticfile ./public
            cf api https://api.fr.cloud.gov
            cf auth "$STAGING_CF_USERNAME" "$STAGING_CF_PASSWORD"
            cf target -o "$STAGING_CF_ORG" -s "$STAGING_CF_SPACE"
            cf push preview-nrrd -f ./manifest.yml

  dev:
    docker:
      # This image has the latest cf-cli as well as zero downtime plugins, if needed.
      - image: circleci/node:12.13.0-browsers
    resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: npm install
      - save_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - aws-s3/sync:
          arguments: |
          aws-access-key-id: NPS_AWS_ACCESS_KEY
          aws-region: NPS_AWS_REGION
          aws-secret-access-key: NPS_AWS_SECRET_ACCESS_KEY
          from: 's3://$NPS_BUCKET_NAME/downloads/'
          to: static/downloads/
      - run:
          name: Build gatsby
          command: npm run build
      - run:
          name: deploy to cloud.gov
          command: |
            pwd && ls -l
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            # Set $CF_USERNAME and $CF_PASSWORD in CircleCI settings.
            # $CF_ORG, $CF_SPACE, and $APP_NAME can also be set in CircleCI settings or hardcoded here.
            cp Staticfile ./public
            cf api https://api.fr.cloud.gov
            cf auth "$DEV_CF_USERNAME" "$DEV_CF_PASSWORD"
            cf target -o "$DEV_CF_ORG" -s "$DEV_CF_SPACE"
            cf push dev-nrrd -f ./manifest.yml
  deploy:
    docker:
      # This image has the latest cf-cli as well as zero downtime plugins, if needed.
      - image: circleci/node:12.13.0-browsers
    resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
      - run:
          name: Install node dependencies
          command: npm install
      - save_cache:
          key: v3-node-modules-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Build gatsby
          command: npm run build
      - run:
          name: deploy preview to cloud.gov
          command: |
            pwd && ls -l
            curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
            sudo dpkg -i cf-cli_amd64.deb
            cp Staticfile ./public
            # Set $CF_USERNAME and $CF_PASSWORD in CircleCI settings.
            # $CF_ORG, $CF_SPACE, and $APP_NAME can also be set in CircleCI settings or hardcoded here.
            cf api https://api.fr.cloud.gov
            cf auth "$PROD_CF_USERNAME" "$PROD_CF_PASSWORD"
            cf target -o "$PROD_CF_ORG" -s "$PROD_CF_SPACE"
            bash ./swap.sh
            cf push nrrd -f ./manifest.yml
workflows:
  audits:
    jobs:
      - unit_tests:
          filters:
            branches:
              ignore:
                - master
                - staging
      - lint:
          filters:
            branches:
              ignore:
                - master
                - staging

  preview:
    jobs:
      - nrrd-preview:
          filters:
            branches:
              ignore:
                - master
                - dev

  deploy:
    jobs:
      - deploy:
          filters:
            branches:
              only: master

  dev:
    jobs:
      - dev:
          filters:
            branches:
              only: dev
      # - end_to_end_tests:
      #     requires:
      #       - dev
